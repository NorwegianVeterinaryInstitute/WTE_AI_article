---
title: "SEP H5N1 Phylogenetic tree"
author: "Eve Zeyl Fiskebeck"
date: "`r format(Sys.time(), '%d %B, %Y')`"
params:
    strain: "H5N1"
    segment: "HA"
    all_tree_metadata: "data/prepared_data/all_tree_metadata_CAB.RDS"
    duplicates: "results/H5N1_HA/phylog/remove_identical_msa/duplicates_list"
    tree: "results/H5N1_HA/phylog/20240104_HA_H5N1_MSA_filtered_nodub.fasta.contree"
    save_dir: "results/H5N1_HA"
    env_file: "results/env_files/H5N1"
    source_code_dir: 'C:/Users/vi2067/OneDrive - Veterinaerinstituttet/REINSTALLED/projects_vault/Projects/2023/1_AvianInfluenza/12302_Avian_influenza_2023/code/R'
execute: 
  echo: false
  cache: true
format: html
knitr:
  opts_chunk: 
    collapse: true
    comment: "#>" 
    R.options:
      knitr.graphics.auto_pdf: true
editor_options: 
  chunk_output_type: console
---

# Setup

-   sourcing scripts and functions

```{r setup}
#| include: false
library(here)
source(paste(params$source_code, "AI_main.R", sep = "/"))

# Provisional until we get a package
fun_files_path <- list.files(here(params$source_code, "fun"),
  pattern = "*.R",
  full.names = T)
# sourcing all functions
sapply(fun_files_path,source,.GlobalEnv)

```

Note: if you are modifying the script and want to continue to work after, you can load a previous environment (don't forget to save it at the end of your work).

Loads the environment (to continue previous work)

```{r optional load environment}
#| include: false
# Uncomment if you want to load a saved environment file
# if (file.exists(params$env_file)) {load(params$env_file)}
```

# Preparation of metadata specific to the tree

This is the metadata that we combined to do all the trees, and where the host family has been added manually.

\- \[ \] find a fix for readRDS why this bugs in quarto?

```{r}
all_tree_metadata <- readRDS(file = params$all_tree_metadata)
glimpse(all_tree_metadata)
```

We select only the columns that we will use, to reduce complexity

```{r}
all_tree_metadata <- 
  all_tree_metadata %>%
  dplyr::select("label",  "Isolate_Id", 
                 "continent", "country", "year",
                "Host", "Host_latin",  "Host_family")
```

-   List of duplicate sequences that were removed prior building the phylogenetic tree for `r glue::glue("strain {params$strain}, segment {params$segment}")`

# Information:

For the purpose of homogeneization between plots, for the different phylogenetic trees, palettes and grouping helpers are defined in separate files which are sourced in this script.

-   palettes are defined in the file `AI_palettes.R`

# Importing phylogenetic tree, preparing the tree and metdata for plotting

## Rooting the tree

-   importing the tree and cleaning the tip labels (removing extension .fasta)

-   NB we used the consensus tree

```{r}
tree <- ape::read.tree(here(params$tree))
tree$tip.label <- tree$tip.label %>% str_remove_all(., ".*\\|")
```

-   fast plotting: we see that 2 very long branches, this are the outgroup sequences that we will use for rooting. We root those and remove them from the tree.

```{r}
ggtree::ggtree(tree, layout = "rectangular")
```

-   rooting the tree, and dropping the two tips that correspond to the long branch

```{r}
rooted_tree <- ape::root(tree, 
                         outgroup = c("EPI_ISL_177506", "EPI_ISL_1254"),
                         resolve.root = T,
                         edgelabel = T)

rooted_tree <- 
  ape::drop.tip(rooted_tree, c("EPI_ISL_177506", "EPI_ISL_1254"))


```

Verification:

```{r}
ggtree::ggtree(tree, layout = "rectangular")
```

## Integrating information from duplicate sequences

-   because we had identical sequences, that were removed prior reconstructing the phylogenetic tree with IQTREE, we need to re-integrate the metadata and information that was contained in those sequences.

Creating a dataframe from the list of duplicates produced by seqkit:

```{r}
duplicates_df <- create_duplicates_df(here(params$duplicates))
head(duplicates_df)
```

Matching duplicate information for plotting will require a tree plot and then merging. But first we create the metadata for the tree, that includes the duplicates metadata.

> We can do that for the general tree (as afterwards the information that is not in the tree is by labels)

```{r}
tree_meta_incl_duplicates <- 
  tibble::tibble("label" = tree$tip.label) %>%
  dplyr::left_join(duplicates_df) %>%
  dplyr::arrange(dupgrp, duppos) %>%
  # adding data for non duplicates - so we can merge all data 
  # we cannot work with NA for non duplicated - adding 0
  # The non duplicates represent themselves
  dplyr::mutate(duppos = if_else(is.na(duppos), 0, duppos),
                dupgrp = if_else(is.na(dupgrp), 0, dupgrp),
                represented_seq_label = 
                  if_else(
                    is.na(represented_seq_label), 
                    label,
                    represented_seq_label),
                nb_represented_sequences =  
                  if_else(
                    is.na(nb_represented_sequences), 
                    1,
                    nb_represented_sequences),
                ) %>%
  # getting metadata for the tips that are duplicated
  dplyr::left_join(all_tree_metadata, c("represented_seq_label" = "label")) 

```

Now we need to get the contingency tables for each label (which can represent one or several isolates when it is identical to other sequences

```{r}
# I already cleaned the metadata columns, I do not need to drop variables 
tree_meta_incl_duplicates_contingency <- 
  contingency_df_variable_fun(
    data = tree_meta_incl_duplicates, 
    variables = c("continent" , "country" , "Host_latin", "year", 
                  "Host", "Host_family"),
    
    group = label,
    add_var_keep =  c("duppos", "represented_seq_label"), 
    drop_vars = NULL)

```

We obtain a nested table that can be matched to the labels of the tips of the tree

```{r}
head(tree_meta_incl_duplicates_contingency)
```

Adding filtering columns, using the nested data. We want to show where Norwegian sequences are,

but they can be duplicated sequences and thus not the primary labeled sequences on the tree.

For this purpose, we add columns that would allow to tag labels representing isolates from Norway, and those that contain White-tailed Eagles.

```{r}
# replaces info2
tree_meta_incl_duplicates_contingency <- 
  tree_meta_incl_duplicates_contingency %>% 
  check_in_var(., "country", 
               name_new_col = "inNorway", 
               test_expr = rlang::expr("Norway" %in% .x)) %>%
  check_in_var(., "Host_latin", 
               name_new_col = "isHavorn", 
               test_expr = rlang::expr("Haliceetus albicilla" %in% .x)) %>% 
  # We created an helper in AI_grouping_helpers.R (allow homogeneization)  
  dplyr::mutate(category_highlight = !!grouping_helper_category_highligth) %>%
  string_levels_var(var = "year") %>%
  dplyr::ungroup() %>%
  dplyr::mutate_at(dplyr::vars(category_highlight), 
            ~ factor(.x, levels = category_highligth_levels, ordered = T))
  

```

## Exploration f the phylogenetic tree

```{r}
explor_plot1 <- 
  rooted_tree %>%
  ggtree::ggtree(., layout = "rectangular", ladderize = T, 
                 lwd = .1, color = "grey") %<+%
  tree_meta_incl_duplicates_contingency +
  # Highlight Norwegian isolates
  geom_tippoint(aes(color = category_highlight, 
                    shape = levels_year
                    ),
                data = . %>% droplevels(),
                position = ggforce::position_auto()) +
  scale_color_manual(values = category_highlight_pal, name = "Highlight") +
  scale_shape_manual(values = SEP_years_shape_pal, name = "Collection")
explor_plot1
```

```{r}
ggsave(filename = here(params$save_dir, "H1N5_explor1.svg"),
       plot = explor_plot1,
       dpi = 300,
       units = "cm",
       width = 20, height = 30) 
```
