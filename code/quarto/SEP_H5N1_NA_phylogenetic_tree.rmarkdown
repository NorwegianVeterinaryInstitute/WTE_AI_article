---
title: "SEP H5N1 NA Phylogenetic tree"
author: "Eve Zeyl Fiskebeck"
date: "`r format(Sys.time(), '%d %B, %Y')`"
params:
    strain: "H5N1"
    segment: "NA"
    all_tree_metadata: "data/prepared_data/all_tree_metadata_CAB.RDS"
    tree: "results/H5N1_NA/iqtree/SEP_NA_H5N1_MSA_nommals.fasta.contree"
    save_dir: "results/H5N1_NA"
    env_file: "results/env_files/H5N1_NA_SEP.RData"
    source_code: 'code/R'
execute: 
  echo: false
  cache: false
format: html
knitr:
  opts_chunk: 
    collapse: true
    comment: "#>" 
    R.options:
      knitr.graphics.auto_pdf: true
editor_options: 
  chunk_output_type: console
---


# Setup

-   sourcing scripts and functions


```{r setup}
#| include: false
library(here)
source(here::here(params$source_code, "AI_main.R"))

# Provisional until we get a package
fun_files_path <- list.files(here::here(params$source_code, "fun"),
  pattern = "*.R",
  full.names = T)
# sourcing all functions
sapply(fun_files_path,source,.GlobalEnv)

```


Note: if you are modifying the script and want to continue to work after, you can load a previous environment (don't forget to save it at the end of your work).

Loads the environment (to continue previous work)


```{r optional load environment}
#| include: false
# Uncomment if you want to load a saved environment file
#if (file.exists(here(params$env_file))) {load(here(params$env_file))}
```


# Preparation of metadata specific to the tree

This is the metadata that we combined to do all the trees, and where the host family has been added manually.


```{r}
all_tree_metadata <- readRDS(file = here(params$all_tree_metadata))
#glimpse(all_tree_metadata)

# I need a copy without filter to retrieve the names at the end
all_tree_metadata2 <- all_tree_metadata
```


We select only the columns that we will use, to reduce complexity


```{r}
all_tree_metadata <- 
  all_tree_metadata %>%
  dplyr::select("label",  "Isolate_Id", "subtype", 
                 "continent", "country", "year",
                "Host", "Host_latin",  "Host_family")
```


-   List of duplicate sequences that were removed prior building the phylogenetic tree for `r glue::glue("strain {params$strain}, segment {params$segment}")`

# Information:

For the purpose of homogeneization between plots, for the different phylogenetic trees, palettes and grouping helpers are defined in separate files which are sourced in this script.

-   palettes are defined in the file `AI_palettes.R`

<!-- reasoning detail and putting that in place in 2024-01-02_SEP_HA_final_tree_script.Rmd
last commit 2024-01-30 in the pilot project. After started to concise in functions.
-->

# Importing phylogenetic tree, preparing the tree and metdata for plotting

## Rooting the tree

-   importing the tree and cleaning the tip labels (removing extension .fasta)

-   NB we used the consensus tree


```{r}
tree <- ape::read.tree(here(params$tree))
tree$tip.label <- tree$tip.label %>% str_remove_all(., ".*\\|") %>%
  str_remove_all(., "t$") 
```


-   fast plotting: we see that 2 very long branches, this are the outgroup sequences that we will use for rooting. We root those and remove them from the tree.


```{r}
ggtree::ggtree(tree, layout = "rectangular") +
    geom_point(. %>% 
               filter(label == "EPI_ISL_177506" | label == "EPI_ISL_1254"),
             mapping = aes(x = x, y = y),
             color = "green",
             size = 3)
```


-   rooting the tree, and dropping the two tips that correspond to the long branch of the outgroup


```{r}
rooted_tree <- ape::root(tree, 
                         outgroup = c("EPI_ISL_177506", "EPI_ISL_1254"),
                         resolve.root = T,
                         edgelabel = T)

rooted_tree <- 
  ape::drop.tip(rooted_tree, c("EPI_ISL_177506", "EPI_ISL_1254"))

```



Verification:


```{r}
ggtree::ggtree(rooted_tree, layout = "rectangular")
```






## No duplicate sequences to integrate in this tree

- creating table with metadata


```{r}
tree_meta <- 
  tibble::tibble("label" = tree$tip.label) %>%
  # getting metadata for the tips that are duplicated
  dplyr::left_join(all_tree_metadata, c("label" = "label")) 
```


- recheck that we only have the correct subtypes included 

```{r}
tree_meta %>% 
  dplyr::group_by(subtype) %>%
  dplyr::summarise(n = n())
```


Adding filtering columns. We want to show where Norwegian sequences are,

For this purpose, we add columns that would allow to tag labels representing isolates from Norway, and those that contain White-tailed Eagles.

> Note here could have been simpler, but do as the same script as possible as H5N1_HA


```{r}
tree_meta <- 
  tree_meta %>% 
  check_in_var(., "country", 
               name_new_col = "inNorway", 
               test_expr = rlang::expr("Norway" %in% .x)) %>% 
  check_in_var(., "Host_latin", 
               name_new_col = "isWTE", 
               test_expr = rlang::expr("Haliaeetus albicilla" %in% .x)) %>%
  dplyr::mutate(category_highlight = !!grouping_helper_category_highligth) %>%
  string_levels_var(var = "year") %>%
  dplyr::ungroup() %>%
  dplyr::mutate_at(dplyr::vars(category_highlight), 
            ~ factor(.x, levels = category_highligth_levels, ordered = T))
```


## Exploration of the phylogenetic tree


```{r}
explor_plot1 <- 
  rooted_tree %>%
  ggtree::ggtree(., layout = "rectangular", ladderize = T, 
                 lwd = .1, color = "grey") %<+%
  tree_meta +
  # Highlight Norwegian isolates
  ggtree::geom_tippoint(aes(
    color = category_highlight, 
    shape = levels_year
    ),
                data = . %>% droplevels(),
                position = ggforce::position_auto()) +
  ggplot2::scale_color_manual(values = category_highlight_pal, name = "Highlight Norway") +
  ggplot2::scale_shape_manual(values = SEP_years_shape_pal, name = "Collection")
explor_plot1
```

```{r}
ggsave(filename = here::here(params$save_dir, "explor_plot1.svg"),
       plot = explor_plot1,
       dpi = 300,
       units = "cm",
       width = 20, height = 30) 
```


# Preparing tree visualisation

## 1. Determining monophyly, node depth and descendants from nodes


```{r}
# replaces list2
rooted_tree_simple_plot_list <- 
  monophyly_nodetag_simple_plot_fun(rooted_tree, lwd = .1, color = "grey")
```




-   saving in individual objects (copy). We will reuse the plot data
We need to add the tips in descendants from nodes - so its homogeneous for next function


```{r}
my_plotdata <- rooted_tree_simple_plot_list$simple_plot$data   %>%
  dplyr::rowwise() %>%
  dplyr::mutate(descendants_tips_from_node = if_else(isTip,
                                                     list(label), 
                                                     list(descendants_tips_from_node)))
```




data check

```{r}
my_plotdata %>%
  filter(!isTip) %>%
  print(n = 10, width = Inf)
```


Checking data - ok it has nested the descendants from nodes 

```{r}
my_plotdata %>% filter(label == "N1") %>%
  select(descendants_tips_from_node) %>%
  unnest(descendants_tips_from_node)
```



## 2. Adding metadata to nodes and tips 

> for consistency with previous script - we also add tipmetalink 


```{r}
my_plotdata <- 
  my_plotdata %>%
  update_plotdata_desc_repr_metalink_fun(df_duplicate = NULL, 
                                         df_label = NULL,
                                         df_represented = NULL) 
```


- linking metadata to the tree data for the selected column by creating nested
dataframes for each variable and creating contingency tables for each nested
variable 

We create contingency tables and nested variables that represent the metadata 
for each node and tip (label column). 

Note here, we come back to the original metadata table, because we have the 
list of tips that is represented at each label (tip or node)

Here we do not want to use interaction between factors

```{r}
my_plotdata <- 
  my_plotdata %>%
  metadata_link_var_cont_fun(
    col_link = tip_metalink,
    metadata = all_tree_metadata,
    interaction = FALSE,
    country, Host, Host_latin, year, continent, Host_family) 
```



Here is how it looks like 

```{r}
names(my_plotdata)
```

```{r}
my_plotdata %>% 
    print(n = 10, width = Inf)
```


 
Selecting one column where several tips are represented and
showing an example of how the nested variable looks like, using eg. 
nested country variable

> note for this data set its only nodes 


```{r}
my_plotdata %>%
  filter(label == "N1") %>% 
  dplyr::select(nested_country) %>%
  tidyr::unnest(nested_country)
```


`pos` is the index, in case we need to refer to it. 
`label` is the label of the sequences that are represented 

Now we can look at the contingency table for the same variable 

```{r}
my_plotdata %>%
  filter(label == "N1") %>% 
  dplyr::select(ctg_country) %>%
  tidyr::unnest(ctg_country)
```


`freq_levels@country` : is the number of observations in each country
`nb_levels@country` : is common in the nested table, its the number of levels of the variable country


- NOW: we can reinsert the augmented data to the plot 

```{r}
rooted_tree_simple_plot_list$simple_plot$data <- my_plotdata
```


 

## 3. Filtering based on criteria based on information from nested metadata 

- Filtering based on criteria that are found in the nested metadata that is attached
to the tree plot_data 

We add a tag 
- if there is at least one isolate that is represented by a label 
in the phylogenetic tree has been collected in Norway 


```{r}
my_plotdata <- 
  my_plotdata %>% 
  dplyr::rowwise() %>%
  # Tag Norway
  dplyr::mutate(inNorway = base::list(
    base::any(
      rlist::list.mapv(ctg_country[["country"]],  "Norway" %in% .)
      )
    )) %>%
  tidyr::unnest(inNorway) %>%
  # checking if the data contains WTE
  check_in_var(., "ctg_Host_latin", 
               name_new_col = "isWTE", 
               test_expr = rlang::expr("Haliaeetus albicilla" %in% .x))  %>% 
  dplyr::mutate(category_highlight = !!grouping_helper_category_highligth) %>%
  dplyr::mutate_at(vars(category_highlight), 
                   ~ factor(.x, levels = category_highligth_levels, ordered = T)
                   ) 
```




## 4. Test visualisation

We can visualize which nodes can be collapsed and at which depths
We can try to vary the depth of notes to be collapsed 


```{r}
# now we now its ok we can put back the data in the plot
rooted_tree_simple_plot_list$simple_plot$data <- my_plotdata
names(rooted_tree_simple_plot_list$simple_plot$data)
```


We add the node labels so we can know which ones we can collapse afterwards

```{r}
explor_plot2 <- 
  rooted_tree_simple_plot_list$simple_plot  +
  # get the nodes labels on the branches 
   ggplot2::geom_text(mapping = aes(x = branch, 
                                   label = label, 
                                   color = "label_monophy_large"),
                     data = . %>% 
                       filter(!isTip, 
                            as.numeric(node_depth) >= 5,
                            as.numeric(labels_bootstrap) >= 95,
                            !inNorway),
                     size = 2) +
  ggplot2::scale_color_manual(values = c("label_monophy_large" = "blue")) +
  ggnewscale::new_scale_color() +
  ggtree::geom_tippoint(aes(color = category_highlight),
                position = ggforce::position_auto()) +
  ggplot2::scale_color_manual(values = category_highlight_pal) 

explor_plot2
```

```{r}
ggsave(
  filename = here::here(params$save_dir, "explor_plot2.svg"),
  plot = explor_plot2, 
  dpi = 600, 
  units = "cm", width = 20, height = 30)

```


# Collapsing nodes


## 1. Define criteria priority of nodes to collapse 

 1. all monophyletic nodes (no need for bootstrap support) where isolates 
 belong to the same countries (supposed to represent same event) AND 
 are not from Norway. 
 
We need to extract a list where only one country is represented on node 


```{r}
my_plotdata <- 
  my_plotdata %>% 
  dplyr::rowwise() %>%
  # different treatment for tips and for nodes
  # test if nb level of countries is more than 1 -> FALSE
  dplyr::mutate(isOneCountry = 
           dplyr::if_else(isTip, 
                          NA, 
                          (purrr::map(
                              .data[["ctg_country"]][["nb_levels@country"]],  ~ .) %>%
                             unlist() %>%
                             unique )  <= 1
                          )
           )
```


NB: isMonoNobot is always TRUE for nodes, as only get descendants from nodes 
(so I could have removed this but ok)


```{r}
nodes_OneCountry_NotNorway  <- 
  my_plotdata %>%
  filter(!isTip, isOneCountry & !inNorway) %>%
  pull(label) 
```


  2. monophyletic nodes (incl. bootstrap support) where our isolates 
are not included (visual plot to define limit of depth) 

Here I choose a limit of node depth => 5
We will need to collapse nodes that are deepest first (ensure max collapsing,
as the following nodes can be subordinate)


```{r}
nodes_monophyboot_notNorway <-
  my_plotdata %>%
  filter(!isTip, 
         isMono_noboot, 
         !inNorway, 
         as.numeric(node_depth) >= 5) %>%
  # we need priority order to collapse by deepest first
  arrange(desc(node_depth)) %>%
  pull(label)
```


By order of priority, the nodes to collapse are:

```{r}
nodes_select_collapsing_1 <- 
  unique(c(nodes_monophyboot_notNorway, nodes_OneCountry_NotNorway))
```


## 2. First collapsing of nodes according to defined criteria (step 1)

> apparte to update data and to get objects easier to work with 
> saving the tree that had node labels 


```{r}
rooted_tree_simple_plot_list$simple_plot$data <- my_plotdata
my_rooted_tree <- rooted_tree_simple_plot_list$tree_nodelab
```



- collapsing tree recursively - we need a list of named nodes to collapse 


```{r}
my_collapsed_tree <- 
  collapsing_nodes_from_nodes_fun(
    my_rooted_tree, 
    nodes_select_collapsing_1,
    trim.internal = F
    )
# Added avoidance collapse single to test 

```



Visualization of the collapsed tree 


```{r}
explor_plot3 <- 
  my_collapsed_tree %>%
  ggtree::ggtree(., layout = "rectangular", 
                 ladderize = T, 
                 lwd = .1,
                 color = "grey")

explor_plot3
```

- we need to merge the metadata with the collapsed data 

Because we have labelled nodes with name, we can reuse the previous labels


```{r}
my_plotdata %>% names()
```


label create the join. 



```{r}
explor_plot3$data <- 
  explor_plot3$data %>% 
  # 4 is label, 10 is labels bootstrap - to the end it is metadata 
  # is joining by label - the only common variable
  dplyr::left_join(my_plotdata %>% 
                     select(c(4, 10:ncol(my_plotdata)))
                   )
```


Now we can visualize the first collapsed plot to make adjustments 


```{r}
explor_plot3b <- 
  explor_plot3 +
  # tip points
  ggplot2::geom_point(aes(x, y, color = category_highlight),
                      data = . %>% filter(isTip), 
                      position = ggforce::position_auto(), size = 1.25) +
  ggplot2::scale_color_manual(values = category_highlight_pal,
                              na.translate = FALSE,
                              name = "Highlight Norway") +
  # adding bootstrap value on branches
  ggnewscale::new_scale_color() +
  ggtree::geom_point(aes(x = branch, 
                         color = as.numeric(labels_bootstrap) < 95),
                     data = . %>% filter(!isTip), 
                     shape = 19, size = .1, na.rm = T) +
  scale_color_manual(name = "Bootstrap", 
                     values =  bootstrap_pal_col2,
                     labels = c(expression(phantom(x) >= 95),
                                expression(phantom(x) < 95)),
                     na.translate = FALSE) +
  # adding the node labels to be able to choose what to collapse
  # more even if not monophyletic 
  ggnewscale::new_scale_color() +
  ggplot2::geom_text(mapping = aes(x = branch, 
                                   label = label, 
                                   color = "label_monophy_large"),
                     data = . %>% 
                       filter(!isTip, !inNorway,
                       as.numeric(node_depth) >= 5),
                     size = .5, 
                     nudge_x = -5e-5) +
  ggplot2::scale_color_manual(values = c("label_monophy_large" = "blue")) 

explor_plot3b
```

```{r}
ggsave(
  here::here(params$save_dir, "explor_plot3.svg"),
  explor_plot3b, 
  device = "svg",
  dpi = 600, 
  units = "cm", width = 15, height = 40
  )
```


## 3. Manual improvement of collapsing the tree

> We need to fetch again the descendants tips from the nodes, because now some nodes
are collapsed or we need to collapse from the starting tree all together. 
Wich is simplest 

- branches where no isolates are included in Norway, it is more to be able 
to have overview of the position of our isolates within the tree. 

Selection from bottom to top. 


```{r}
# now the nodes collapsing is quiet ok 

manual_nodes_selection <- c("N4261", "N1773", "N710")
```



Collapsing the additional nodes 

```{r}
my_collapsed_tree2 <- 
  collapsing_nodes_from_nodes_fun(my_collapsed_tree, 
                                  manual_nodes_selection,
                                  trim.internal = FALSE)
```


Plotting the base of the collapsed tree 

```{r}
explor_plot3c <- 
  my_collapsed_tree2 %>%
  ggtree::ggtree(., layout = "rectangular", 
                 ladderize = T, 
                 lwd = .1,
                 color = "grey")

explor_plot3c
```


Adding the metadata to the collapsed tree
As previously

```{r}
explor_plot3c$data <-
  explor_plot3c$data%>% 
  # 4 is label, 10 is labels boostrap - to the end it is metadata 
  # is joining by label - the only common variable
  dplyr::left_join(my_plotdata %>% 
                     select(c(4, 10:ncol(my_plotdata)))
                   )
```


Rechecking collapse tree for iterative adjustment 

```{r}
plot_adj <- 
  explor_plot3c +
  # tip points
  ggplot2::geom_point(aes(x, y, color = category_highlight),
                      data = . %>% filter(isTip), 
                      position = ggforce::position_auto(), size = 1.25) +
  ggplot2::scale_color_manual(values = category_highlight_pal,
                              na.translate = FALSE,
                              name = "Highlight Norway") +
  # adding bootstrap value on branches
  ggnewscale::new_scale_color() +
  ggtree::geom_point(aes(x = branch, 
                         color = as.numeric(labels_bootstrap) < 95),
                     data = . %>% filter(!isTip), 
                     shape = 19, size = .1, na.rm = T) +
  scale_color_manual(name = "Bootstrap", 
                     values =  bootstrap_pal_col2,
                     labels = c(expression(phantom(x) >= 95),
                                expression(phantom(x) < 95)),
                     na.translate = FALSE) +
  # adding the node labels to be able to choose what to collapse
  # more even if not monophyletic 
  ggnewscale::new_scale_color() +
  ggplot2::geom_text(mapping = aes(x = branch, 
                                   label = label, 
                                   color = "label_monophy_large"),
                     data = . %>% 
                       filter(!isTip, !inNorway,
                       as.numeric(node_depth) >= 5),
                     size = .5, 
                     nudge_x = -5e-5) +
  ggplot2::scale_color_manual(values = c("label_monophy_large" = "blue")) 

plot_adj
```


I need the node labels for the subsets 

```{r}
plot_adj <- 
  plot_adj + 
  ggplot2::geom_text(mapping = aes(x = branch, 
                                   label = label, 
                                   color = "label_monophy_large"),
                     data = . %>%
                       filter(!isTip),
                     size = .5, 
                     nudge_x = -5e-5) 
```

```{r}
ggsave(
  here::here(params$save_dir, "plot_adj_collapsing.svg"),
  plot_adj, 
  device = "svg",
  dpi = 600, 
  units = "cm", width = 15, height = 40
  )
```


## 4. Plotting the collapsed tree

- first we make the base plot  
<!-- NB HERE added solution tips labels -->
Need to add the Isolate_Id to be able to use those as labels in the plot

```{r}
explor_plot3$data <- 
  explor_plotc$data %>% 
  dplyr::left_join(
    all_tree_metadata %>% 
      dplyr::select(label, Isolate_Id),
    by =  c("label" = "label")
    ) %>%
  # Adding labels for nodes in case - so no pb for exporting
  mutate(Isolate_Id = 
           case_when(
             is.na(Isolate_Id) ~ label,
             TRUE ~ Isolate_Id
           )) 
```

```{r}
explor_plot3d <- 
  explor_plot3 +
  # tip points
  ggplot2::geom_point(aes(x, y, color = category_highlight),
                      data = . %>% filter(isTip),
                      position = ggforce::position_auto(), 
                      size = .8) +
  # adding tip labels 
  ggtree::geom_tiplab(aes(label = Isolate_Id),
                      size = 1,
                      vjust = .3,
                      hjust = -1e-1) +
  
  # Highlights
  ggplot2::scale_color_manual(values = category_highlight_pal2, 
                              na.translate = FALSE,
                              name = "Highlight Norway", 
                              guide = guide_legend(order = 1)) +
  
  # Bootstrap on branches
  ggnewscale::new_scale_color() +
  ggtree::geom_point(aes(x = branch, 
                         color = as.numeric(labels_bootstrap) < 95),
                     data = . %>% filter(!isTip), 
                     shape = 19, size = .1, na.rm = T) +
  scale_color_manual(name = "Bootstrap", 
                     values =  bootstrap_pal_col2,
                     labels = c(expression(phantom(x) >= 95),
                                expression(phantom(x) < 95)),
                     na.translate = FALSE, 
                     guide = guide_legend(order = 4))

```

```{r}
explor_plot3d
```



- Then we get the data for the annotations panels (it is required as separate dataframes)

```{r}
names(explor_plot3d$data)
```

```{r}
countries_facet_df <- 
  get_ctg_data_geom_facet(explor_plot3d$data, "ctg_country", "country", "country_string")

Host_family_facet_df <- 
  get_ctg_data_geom_facet(explor_plot3d$data, "ctg_Host_family", "Host_family", "Host_family_string")

# We removed the Host_Latin, was to much data cant be displayed nicely


# getting the countries per group
countries_facet_df2 <- 
  get_data_geom_facet(data = explor_plot3d$data,
                      nested_col = nested_country, 
                      var = country,
                      group_expr = grouping_helper_country)

# getting the host family per group
Host_family_facet_df2 <- 
  get_data_geom_facet(data = explor_plot3d$data, 
                      nested_col = nested_Host_family, 
                      var = Host_family, 
                      group_expr = NULL)

# getting the years 
years_facet_df <- 
  get_data_geom_facet(data = explor_plot3d$data, 
                      nested_col = nested_year, 
                      var = year, 
                      group_expr = NULL)
```


1. adding node that will be cut for detailed plotting with a light green point 
<!-- HERE adding solution tips labels as panel -->

```{r}
explor_plot4 <- 
  explor_plot3d + 
  # adding points where we will do subplots 
    geom_point(
    data = . %>% filter(label == "N1732" | label == "N15"),
    mapping = aes(x = x, y = y),
    size = 1.5,
    color = "green") +
    # have to put the scale here so can work
  ggtree::geom_treescale(x = 1e-3, y = 80,
                         fontsize = 1, 
                         width = 1e-3,
                         label = "Substitution/site",
                         linesize = .1,
                         offset = 1.5) +
  ggtree::vexpand(.01) +
  ggtree::hexpand(.01) +
  ggtree::theme_tree() +
  # Adding the panels 
  # countries barplot and text legend 
    # Adding the years now
  ggnewscale::new_scale_fill() +
    ggtree::geom_facet(
    panel = "Year", 
    data = years_facet_df,
    geom = geom_bar,
    mapping = aes(x = value, fill = variable),
    orientation = 'y', 
    width = 1, 
    stat = "identity") +
  scale_fill_manual(values = years_ind_col_pal,
                    name = "Year",
                     guide = guide_legend(order = 2)) +
  ggnewscale::new_scale_fill() +
    ggtree::geom_facet(
    panel = "Country", 
    data = countries_facet_df2,
    geom = geom_bar,
    mapping = aes(x = value, fill = variable),
    orientation = 'y', 
    width = 1, 
    stat = "identity") +
  scale_fill_manual(values = col_grouped_countries_pal2,
                    name = "Country Groups",
                    guide = guide_legend(order = 3)) +
    ggtree::geom_facet(
    panel = "Country Detail", 
    data = countries_facet_df,
    geom = geom_text,
    mapping = aes(x = -.4, label = val),
    hjust = 0,
    size = 1)  + 
  #guides(fill = "none") +
  ggtree::geom_facet(
    panel = "Family Legend", 
    data = Host_family_facet_df,
    geom = geom_text,
    mapping = aes(x = -.4, label = val),
    hjust = 0,
    size = 1)  +
  theme(strip.text = 
          ggplot2::element_text(size = 9))


explor_plot4
```


- Now we need to adjust the size of the panels 


```{r}
collapsed_plot <- grop_redraw(explor_plot4, 
                               width_mult = c(1, .2, .2, 1, 1)
        )
```

```{r}
collapsed_plot
```


_Figure caption:_
H5N1 NA segment. ML phylogenetic tree with nodes depth >= 5, that did not contained 
Norwegian isolates and nodes that represented groups of isolates from the
same country of origin are collapsed. The tree is rooted, but the outgroup
is not shown, due to large distance to the body of the tree. The information
at the tips and collapsed nodes is representative of the data set, including
identical sequences.



```{r}
ggsave(
  here::here(params$save_dir, "collapsed_plot.svg"),
  collapsed_plot,
  device = "svg",
  dpi = 600, 
  units = "cm", width = 40, height = 50
  )
```



## 5. Exporting the metadata for the plot 


```{r}
export_meta_treenodes_funV2(
  plot_data = explor_plot4$data,
  metadata = all_tree_metadata2,
  col_rep_tips = "tip_metalink",
  file = here::here(params$save_dir, "H5N1_NA_metadata.xlsx"),
  sheet = "H5N1_NA_collapsed_tree_metadata",
  append = FALSE,
  Isolate_Name, year, continent, country, Host_family, Host_latin
)
```



# Components for final visualisation

We will create the global circular tree
And the two groups where White-tailed eagle are found to create trees that
can be looked at more in detail. 


# Circular tree 
We restart from the rooted tree with node labels 


```{r}
rooted_tree_nodelab <- rooted_tree_simple_plot_list$tree_nodelab 
```


Circular metadata will be the at the last plots, except we do not add the coordinates

```{r}
circular_meta <- 
  my_plotdata[c(4, seq(10, ncol(my_plotdata)))] %>%
  get_nested_var("ctg_year", "year", "year_label") %>%
  mutate_at(vars(year_label), unlist) 
```


We had some plotting parameters to be able to view better 

```{r}
circular_meta <- 
  circular_meta %>% 
  mutate(point_size = case_when(
    category_highlight == "Other Country" ~ 0.1,
    TRUE ~ 1
  )) %>%
  mutate(point_size = 
           if_else(label == "N1732" | label == "N15", 1, point_size)
         ) %>%
  # Add the isolate ID 
    dplyr::left_join(
    all_tree_metadata %>% 
      dplyr::select(label, Isolate_Id)) %>%
  # Adding labels for nodes in case - so no pb for exporting
  mutate(Isolate_Id = 
           case_when(
             is.na(Isolate_Id) ~ label,
             TRUE ~ Isolate_Id
           )) 
```

```{r}
# ! here palette is specific for this article: SEP_years_shape_pal
circular_plot <- 
  ggtree(rooted_tree_nodelab, layout = "circular", color = "grey", alpha = .7)  %<+%
  circular_meta +
  ggnewscale::new_scale_color() +
  geom_tippoint(
    aes(color = category_highlight, size = point_size, shape = year_label),
    position = ggforce::position_auto()) +
  # highlight color 
  ggplot2::scale_color_manual(values = category_highlight_pal2, 
                            na.translate = FALSE,
                            name = "Highlight Norway", 
                            guide = guide_legend(order = 2)) +
  # HERE SHAPE
  scale_shape_manual(values = SEP_years_shape_pal, 
                     name = "Shape Year", 
                     na.translate = FALSE,
                     guide = guide_legend(order = 1)) +
  scale_size_continuous(range = c(0, 1)) +
  guides(size = "none") +
  # Adding the highlight for the subsets plots - where is the group branching
  ggnewscale::new_scale_color() +
  geom_point(
    data = . %>% filter(label == "N1732" | label == "N15"),
    mapping = aes(x = x, y = y),
    size = 1.5,
    color = "green")

```


- Adding annotation around the tree

```{r}
country_fruit_df <- 
  get_data_geom_facet(data = circular_plot$data,
                      nested_col = nested_country, 
                      var = country,
                      group_expr = grouping_helper_country)


# getting the years 
years_fruit_df <- 
  get_data_geom_facet(data = circular_plot$data, 
                      nested_col = nested_year, 
                      var = year, 
                      group_expr = NULL) 
  
```

```{r}
circular_plotb <- 
  circular_plot +
  ggnewscale::new_scale_fill() + 
  # Year first circle inside
  ggtreeExtra::geom_fruit(
     data = years_fruit_df,
     geom = geom_bar,
     mapping = aes(x = value,  
                   y = label, 
                   fill = variable),
     size = .2,
     stat = "identity",
     width = 1,
     offset = 0.1,
     pwidth = 0.1) +
  scale_fill_manual(values = years_ind_col_pal,
                    name = "Year",
                    guide = guide_legend(order = 3)) +
  ggnewscale::new_scale_fill() + 
  # Country external 
  ggtreeExtra::geom_fruit(
     data = country_fruit_df ,
     geom = geom_bar,
     mapping = aes(x = value,  
                   y = label, 
                   fill = variable),
     size = .2,
     stat = "identity",
     width = 1,
     offset = 0.1,
     pwidth = 0.15) +
  scale_fill_manual(values = col_grouped_countries_pal2,
                    name = "Country Groups",
                    guide = guide_legend(order = 4)) 

```

```{r}
circular_plotb
```


_Figure caption:_
H5N1 NA segment. ML phylogenetic tree. The light green dots represent the branching 
origin the two groups presented as tree subsets. The tree is rooted, 
but the outgroup is not shown, due to large distance to the body of the tree. 
The information at the tips and collapsed nodes is representative of the 
data set, including identical sequences.



```{r}
ggsave(
  here::here(params$save_dir, "circular_plot.svg"),
  circular_plotb, 
  device = "svg",
  dpi = 600, 
  units = "cm", width = 30, height = 50
  )
```


export metadata circular tree 

```{r}
export_meta_treenodes_funV2(
  plot_data = circular_plotb,
  metadata = all_tree_metadata2,
  col_rep_tips = "tip_metalink",
  file = here::here(params$save_dir, "H5N1_NA_metadata.xlsx"),
  sheet = "H5N1_NA_circular_tree_metadata",
  append = TRUE,
  Isolate_Name, year, continent, country, Host_family, Host_latin
)

```



## Detailed subplots 

## N1732

- getting the list of tips

```{r}
tips_N1732 <- 
  my_plotdata %>% 
  filter(label == "N1732") %>%
  pull(descendants_tips_from_node) %>%
  unlist()
```


- subsetting the tree 

```{r}
subtree_N1732 <- ape::keep.tip(rooted_tree_nodelab, tips_N1732)
```


- creating the simple plot and adding the metadata

<!-- # HERE need to add the tip isolate ID --> 

```{r}
plot_subtree_N1732 <- 
  ggtree(subtree_N1732, layout = "rectangular", color = "grey", alpha = .7)  

# adding the metadata 
plot_subtree_N1732$data <- 
  plot_subtree_N1732$data %>% 
  left_join(my_plotdata %>% 
              select(c(4, seq(10, ncol(my_plotdata)))), 
            by = c("label" = "label")
            ) %>%
  # prepare adding isolate ids
  dplyr::left_join(
    all_tree_metadata %>% 
      dplyr::select(label, Isolate_Id),
    by =  c("label" = "label")
    ) %>%
  # Adding labels for nodes in case - so no pb for exporting
  mutate(Isolate_Id = 
           case_when(
             is.na(Isolate_Id) ~ label,
             TRUE ~ Isolate_Id
           )) 
```


- preparing the data for the panels views
<!-- # HERE ADDED -->

```{r}
N1732_Isolate_Id_df <- 
  plot_subtree_N1732$data %>% 
  filter(isTip) %>% 
  select(label, Isolate_Id) %>% 
  dplyr::rename(val = Isolate_Id) %>%
  distinct()
```

```{r}
N1732_countries_facet_df <- 
  get_ctg_data_geom_facet(plot_subtree_N1732$data, "ctg_country", "country", "country_string")

N1732_Host_family_facet_df <- 
  get_ctg_data_geom_facet(plot_subtree_N1732$data, "ctg_Host_family", "Host_family", "Host_family_string")

N1732_Host_latin_facet_df <- 
  get_ctg_data_geom_facet(plot_subtree_N1732$data, "ctg_Host_latin", "Host_latin", "Host_latin_string")


# getting the countries per group
N1732_countries_facet_df2 <- 
  get_data_geom_facet(data = plot_subtree_N1732$data,
                      nested_col = nested_country, 
                      var = country,
                      group_expr = grouping_helper_country)

# getting the host family per group
N1732_Host_family_facet_df2 <- 
  get_data_geom_facet(data = plot_subtree_N1732$data, 
                      nested_col = nested_Host_family, 
                      var = Host_family, 
                      group_expr = NULL)

# getting the years 
N1732_years_facet_df <- 
  get_data_geom_facet(data = plot_subtree_N1732$data, 
                      nested_col = nested_year, 
                      var = year, 
                      group_expr = NULL)
```


- ploting the tree
<!-- # HERE NEED to ADD ID labels --> 


```{r}
N1732_plot <- 
  plot_subtree_N1732 + 
  ggplot2::geom_point(data = . %>% filter(isTip)  %>%
                        unnest(ctg_year) %>%
                        mutate_at(vars(year), as.character), 
                      aes(color = category_highlight, shape = year)) +
  ggplot2::scale_color_manual(values = category_highlight_pal2, 
                            na.translate = FALSE,
                            name = "Highlight Norway", 
                            guide = guide_legend(order = 2)) +
  # HERE SHAPE
  scale_shape_manual(values = SEP_years_shape_pal, 
                     name = "Shape Year", 
                     na.translate = FALSE, 
                     guide = guide_legend(order = 1)) +
  # we need to add the values for those that have different years 
  # adding bootstrap value on branches
  ggnewscale::new_scale_color() +
  ggtree::geom_point(aes(x = branch, 
                         color = as.numeric(labels_bootstrap) < 95),
                     data = . %>% filter(!isTip), 
                     shape = 19, size = .5, na.rm = T) +
  scale_color_manual(name = "Bootstrap", 
                     values =  bootstrap_pal_col,
                     labels = c(expression(phantom(x) >= 95),
                                expression(phantom(x) < 95)),
                     na.translate = FALSE,
                     guide = guide_legend(order = 6)) +
  ggtree::geom_treescale(x = 1e-3, y = 80,
                         fontsize = 1, 
                         width = 1e-3,
                         label = "Substitution/site",
                         linesize = .1,
                         offset = 1.5) +
  ggtree::vexpand(.01) +
  ggtree::hexpand(.01) +
  ggtree::theme_tree() +
  # Adding the panels 
  # HERE : Adding Isolates ID  
  ggtree::geom_facet(
    panel = "Isolate ID", 
    data = N1732_Isolate_Id_df,
    geom = geom_text,
    mapping = aes(x = -.4, label = val),
    hjust = 0,
    size = .5)  +
  # countries barplot and text legend 
    # Adding the years now
  ggnewscale::new_scale_fill() +
    ggtree::geom_facet(
    panel = "Year", 
    data = N1732_years_facet_df,
    geom = geom_bar,
    mapping = aes(x = value, fill = variable),
    orientation = 'y', 
    width = 1, 
    stat = "identity") +
  scale_fill_manual(values = years_ind_col_pal,
                    name = "Year",
                    guide = guide_legend(order = 3)) +
  ggnewscale::new_scale_fill() +
    ggtree::geom_facet(
    panel = "Country", 
    data = N1732_countries_facet_df2,
    geom = geom_bar,
    mapping = aes(x = value, fill = variable),
    orientation = 'y', 
    width = 1, 
    stat = "identity") +
  scale_fill_manual(values = col_grouped_countries_pal2,
                    name = "Country Groups", 
                    guide = guide_legend(order = 4)) +
    ggtree::geom_facet(
    panel = "Country Detail", 
    data = N1732_countries_facet_df,
    geom = geom_text,
    mapping = aes(x = -.4, label = val),
    hjust = 0,
    size = .5)  + 
  # Adding Host familly panel 
    ggnewscale::new_scale_fill() +
    ggtree::geom_facet(
    panel = "Family", 
    data = N1732_Host_family_facet_df2,
    geom = geom_bar,
    mapping = aes(x = value, fill = variable),
    orientation = 'y', 
    width = 1, 
    stat = "identity") +
  scale_fill_manual(values = host_families_color_pal,
                    name = "Host Family",
                    guide = guide_legend(order = 5)) +
  #guides(fill = "none") +
  ggtree::geom_facet(
    panel = "Family Legend", 
    data = N1732_Host_family_facet_df,
    geom = geom_text,
    mapping = aes(x = -.4, label = val),
    hjust = 0,
    size = .5)  +
  ggtree::geom_facet(
    panel = "Host Latin", 
    data = N1732_Host_latin_facet_df,
    geom = geom_text,
    mapping = aes(x = -.4, label = val),
    hjust = 0,
    size = .5) +
  theme(strip.text = 
          ggplot2::element_text(size = 9))


N1732_plot
```


- Now we need to adjust the size of the panels 


```{r}
N1732_plotb <- grop_redraw(N1732_plot, 
                              width_mult = c(1, .3, .1, .1, .3, .1, .3, .3)
        )
```

```{r}
N1732_plotb
```


_Figure Caption:_
H5N1 NA segment. Detail of the first group of isolates from the ML phylogenetic tree. 
The subset tree is rooted and branches on the second green dot from the root.
All the isolates are shown."




```{r}
ggsave(
  here::here(params$save_dir, "Node_1732_detail.svg"),
  N1732_plotb,
  device = "svg",
  dpi = 600, 
  units = "cm", width = 35, height = 120
  )
```


Exporting the metadata 

```{r}
export_meta_treenodes_funV2(
  plot_data = N1732_plot,
  metadata = all_tree_metadata2,
  col_rep_tips = "tip_metalink",
  file = here::here(params$save_dir, "H5N1_NA_metadata.xlsx"),
  sheet = "H5N1_NA_N1732_tree_metadata",
  append = TRUE,
  Isolate_Name, year, continent, country, Host_family, Host_latin
)

```



## N15

- getting the list of tips 

```{r}
tips_N15 <- 
  my_plotdata %>% 
  filter(label == "N15") %>%
  pull(descendants_tips_from_node) %>%
  unlist()
```


- subsetting the tree 

```{r}
subtree_N15 <- ape::keep.tip(rooted_tree_nodelab, tips_N15)
```


- creating the simple plot and adding the metadata


```{r}
plot_subtree_N15 <- 
  ggtree(subtree_N15, layout = "rectangular", color = "grey", alpha = .7)
```


<!-- HERE ADDED  - to get the ids --> 

```{r}
# adding the metadata 
plot_subtree_N15$data <- 
  plot_subtree_N15$data %>% 
  left_join(my_plotdata %>% 
              select(c(4, seq(10, ncol(.)))), 
            by = c("label" = "label")
            ) %>% 
  # adding isolates ID
  dplyr::left_join(
    all_tree_metadata %>% 
      dplyr::select(label, Isolate_Id),
    by =  c("label" = "label")
    ) %>%
  # Adding labels for nodes in case - so no pb for exporting
  mutate(Isolate_Id = 
           case_when(
             is.na(Isolate_Id) ~ label,
             TRUE ~ Isolate_Id
           )) 
```


- preparing the data for the panels views
<!-- # HERE ADDED --> 

```{r}
N15_Isolate_Id_df <- 
  plot_subtree_N15$data %>% 
  filter(isTip) %>% 
  select(label, Isolate_Id) %>% 
  dplyr::rename(val = Isolate_Id) %>%
  distinct()
```

```{r}
N15_countries_facet_df <- 
  get_ctg_data_geom_facet(plot_subtree_N15$data, "ctg_country", "country", "country_string")

N15_Host_family_facet_df <- 
  get_ctg_data_geom_facet(plot_subtree_N15$data, "ctg_Host_family", "Host_family", "Host_family_string")

N15_Host_latin_facet_df <- 
  get_ctg_data_geom_facet(plot_subtree_N15$data, "ctg_Host_latin", "Host_latin", "Host_latin_string")


# getting the countries per group
N15_countries_facet_df2 <- 
  get_data_geom_facet(data = plot_subtree_N15$data,
                      nested_col = nested_country, 
                      var = country,
                      group_expr = grouping_helper_country)

# getting the host family per group
N15_Host_family_facet_df2 <- 
  get_data_geom_facet(data = plot_subtree_N15$data, 
                      nested_col = nested_Host_family, 
                      var = Host_family, 
                      group_expr = NULL)

# getting the years 
N15_years_facet_df <- 
  get_data_geom_facet(data = plot_subtree_N15$data, 
                      nested_col = nested_year, 
                      var = year, 
                      group_expr = NULL)
```


- ploting the tree


```{r}
N15_plot <- 
  plot_subtree_N15 + 
  ggplot2::geom_point(data = . %>% filter(isTip)  %>%
                        unnest(ctg_year) %>%
                        mutate_at(vars(year), as.character) %>%
                        transform_positions_at_unnest(spacing = 2e-4), 
                      aes(color = category_highlight, shape = year)) +
  ggplot2::scale_color_manual(values = category_highlight_pal2, 
                            na.translate = FALSE,
                            name = "Highlight Norway", 
                            guide = guide_legend(order = 2)) +
  # HERE SHAPE
  scale_shape_manual(values = SEP_years_shape_pal, 
                     name = "Shape Year", 
                     na.translate = FALSE, 
                     guide = guide_legend(order = 1)) +
  # we need to add the values for those that have different years 
  # adding bootstrap value on branches
  ggnewscale::new_scale_color() +
  ggtree::geom_point(aes(x = branch, 
                         color = as.numeric(labels_bootstrap) < 95),
                     data = . %>% filter(!isTip), 
                     shape = 19, size = .5, na.rm = T) +
  scale_color_manual(name = "Bootstrap", 
                     values =  bootstrap_pal_col,
                     labels = c(expression(phantom(x) >= 95),
                                expression(phantom(x) < 95)),
                     na.translate = FALSE,
                     guide = guide_legend(order = 6)) +
  ggtree::geom_treescale(x = 1e-3, y = 80,
                         fontsize = 1, 
                         width = 1e-3,
                         label = "Substitution/site",
                         linesize = .1,
                         offset = 1.5) +
  ggtree::vexpand(.01) +
  ggtree::hexpand(.01) +
  ggtree::theme_tree() +
  # Adding the panels 
  # HERE : Adding Isolates ID  
  ggtree::geom_facet(
    panel = "Isolate ID", 
    data = N15_Isolate_Id_df,
    geom = geom_text,
    mapping = aes(x = -.4, label = val),
    hjust = 0,
    size = 1)  +
  # countries barplot and text legend 
    # Adding the years now
  ggnewscale::new_scale_fill() +
    ggtree::geom_facet(
    panel = "Year", 
    data = N15_years_facet_df,
    geom = geom_bar,
    mapping = aes(x = value, fill = variable),
    orientation = 'y', 
    width = 1, 
    stat = "identity") +
  scale_fill_manual(values = years_ind_col_pal,
                    name = "Year",
                    guide = guide_legend(order = 3)) +
  ggnewscale::new_scale_fill() +
    ggtree::geom_facet(
    panel = "Country", 
    data = N15_countries_facet_df2,
    geom = geom_bar,
    mapping = aes(x = value, fill = variable),
    orientation = 'y', 
    width = 1, 
    stat = "identity") +
  scale_fill_manual(values = col_grouped_countries_pal2,
                    name = "Country Groups", 
                    guide = guide_legend(order = 4)) +
    ggtree::geom_facet(
    panel = "Country Detail", 
    data = N15_countries_facet_df,
    geom = geom_text,
    mapping = aes(x = -.4, label = val),
    hjust = 0,
    size = 1)  + 
  # Adding Host familly panel 
    ggnewscale::new_scale_fill() +
    ggtree::geom_facet(
    panel = "Family", 
    data = N15_Host_family_facet_df2,
    geom = geom_bar,
    mapping = aes(x = value, fill = variable),
    orientation = 'y', 
    width = 1, 
    stat = "identity") +
  scale_fill_manual(values = host_families_color_pal,
                    name = "Host Family",
                    guide = guide_legend(order = 5)) +
  #guides(fill = "none") +
  ggtree::geom_facet(
    panel = "Family Legend", 
    data = N15_Host_family_facet_df,
    geom = geom_text,
    mapping = aes(x = -.4, label = val),
    hjust = 0,
    size = 1)  +
  ggtree::geom_facet(
    panel = "Host Latin", 
    data = N15_Host_latin_facet_df,
    geom = geom_text,
    mapping = aes(x = -.4, label = val),
    hjust = 0,
    size = 1) +
  theme(strip.text = 
          ggplot2::element_text(size = 9))


#N15_plot
```


- Now we need to adjust the size of the panels 


```{r}
N15_plotb <- grop_redraw(N15_plot, 
                         width_mult = c(1, .3, .1, .1, .3, .1, .3, .3)
        )
```

```{r}
N15_plotb
```


_Figure Caption:_

H5N1 NA segment. Detail of the first group of isolates from the ML phylogenetic tree. 
The subset tree is rooted and branches on the second green dot from the root.
All the isolates are shown. The position
of horizontal points is slighly adjusted to avoid overlap."



```{r}
ggsave(
  here::here(params$save_dir, "Node_15_detail.svg"),
  N15_plotb,
  device = "svg",
  dpi = 600, 
  units = "cm", width = 35, height = 50
  )
```


Exporting the metadata

```{r}
export_meta_treenodes_funV2(
  plot_data = N15_plot,
  metadata = all_tree_metadata2,
  col_rep_tips = "tip_metalink",
  file = here::here(params$save_dir, "H5N1_NA_metadata.xlsx"),
  sheet = "H5N1_NA_N15_tree_metadata",
  append = TRUE,
  Isolate_Name, year, continent, country, Host_family, Host_latin
)
```



# Saving environment
To continue analyses that are not finished

```{r}
save.image(here::here(params$env_file))
```



Metadata for all H5N1 isolates included

```{r}
data_here <-  
  tibble(label = tree$tip.label) %>%
  left_join(all_tree_metadata2, by = "label") %>%
  select(label, Isolate_Id, subtype, continent, country, year, 
         Host_family, Host_latin, Isolate_Name) %>%
  distinct()

saveRDS(data_here, here::here(params$save_dir, "H5N1_NA_metadata.rds"))
```


<!-- HERE modified 
Select label
Changed names sheets
need to append in order not to erase previous data 
Then has information on the root 
--> 

```{r}
xlsx::write.xlsx(as.data.frame(data_here) %>%
                   dplyr::select(-label), 
                 here::here(params$save_dir, "H5N1_NA_metadata.xlsx"),
                 sheetName = "H5N1_NA_all_metadata",
                 showNA = FALSE,
                 row.names = FALSE,
                 append = TRUE)
```




This dataset is representative for `r nrow(data_here)` isolates. 
This includes `r length(tree$tip.label)` isolates with unique sequences, 
including 2 sequences as outgroup. 

Some isolates have been submitted to GISAID since we started this analysis, therefore the 
complement of GISAID_ID will be completed manually.

